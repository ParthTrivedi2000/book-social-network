# Giving a name to pipeline
name: BSN Backend API Pipeline

# now here we need to define like when we want to build/ trigger this pipeline
on:
  push:
    branches:
      - feature/ci-pipeline
    paths:
      - book-network-backend/**
      - docker/backend/**
      - 'docker-compose.yml'
      - .github/workflows/*-backend.yml

jobs:
  compile:
    runs-on: ubuntu
    # This is my 1st job name of compilation of project.
    name: Compile the Project
    # below are hte steps needs to be performed under this job run
    steps:
      # Step-1:-
      - name: Checkout code
      # Now here each step can be weather and Action (existing/custom any action) or we can run command. But here for almost
      # steps we are using predefined actions
        uses: actions/checkout@v4
        # with is used to pass any arguments if we want, to current step action
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Compile the project
        run: |
          cd book-network-backend
          ./mvnw clean compile

  # 2nd job
  unit-tests:
    runs-on: ubuntu
    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Running the Unit tests
        run: |
          cd book-network-backend
          ./mvnw clean test

  # 3rd job
  build:
    runs-on: ubuntu
    name: Build Backend
    needs: [compile, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build Backend Project
        run: |
          cd book-network-backend
          ./mvnw clean package

  # 4th job
  build-image:
    name: Build Docker Image
    runs-on: ubuntu
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build Backend Project
        run: |
          cd book-network-backend
          ./mvnw clean package

      - name: Extract Project Version
        id: extract_version
        run: |
          cd book-network-backend
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project_version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build & Push to Dockerhub
        uses: docker/build-push-action@v5
        with:
          context: book-network-backend
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{secrets.DOCKERHUB_USERNAME}}/bsn-api:${{steps.extract_version.outputs.VERSION}},${{secrets.DOCKERHUB_USERNAME}}/bsn-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{steps.extract_version.outputs.VERSION}}

  # # 5th job
  # deploy:
  #   name: Deploy Backend
  #   runs-on: ubuntu
  #   needs: [build-image]
  #   steps:
  #     - name: Create Deployment folder on VM
  #       # ssh username@ip_address
  #       run: ssh ${{secrets.VPS_USERNAME}}@${{secrets.VPS_IP}} "mkdir -p ci-cd"

  #     - name: Copy the Docker-Compose file
  #       run: scp docker-compose.yml ${{secrets.VPS_USERNAME}}@${{secrets.VPS_IP}}:ci-cd/docker-compose.yml

  #     - name: Set ENV variables and Deploy
  #       run: |
  #         ssh ${{secrets.VPS_USERNAME}}@${{secrets.VPS_IP}} <<EOF
  #         export EMAIL_HOSTNAME=${{secrets.EMAIL_HOSTNAME}}
  #         export EMAIL_PASSWORD=${{secrets.EMAIL_PASSWORD}}
  #         export EMAIL_USERNAME=${{secrets.EMAIL_USERNAME}}
  #         cd ci-cd
  #         docker-compose -f docker-copose.yml pull -q
  #         docker-compose -f docker-copose.yml up -d
  #         EOF
          
