# Giving a name to pipeline
name: BSN Backend API Pipeline

# now here we need to define like when we want to build/ trigger this pipeline
on:
  push:
    branches:
      - feature/ci-pipeline
      - feature/cloud-deployment
    paths:
      - book-network-backend/**
      - docker/backend/**
      - 'docker-compose.yml'
      - .github/workflows/*-backend.yml



jobs:
  compile:
    runs-on: ubuntu-latest
    # This is my 1st job name of compilation of project.
    name: Compile the Project
    # below are hte steps needs to be performed under this job run
    steps:
      # Step-1:-
      - name: Checkout code
      # Now here each step can be weather and Action (existing/custom any action) or we can run command. But here for almost
      # steps we are using predefined actions
        uses: actions/checkout@v4
        # with is used to pass any arguments if we want, to current step action
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Compile the project
        run: |
          cd book-network-backend
          ./mvnw clean compile

  # 2nd job
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Running the Unit tests
        env:
          DB_URL: ${{ secrets.DB_URL }}  # Optional: You can override with secrets if needed
          USER_NAME: ${{ secrets.DB_USERNAME }}  # Optional: You can override with secrets if needed
          PASSWORD: ${{ secrets.DB_PASSWORD }}  # Optional: You can override with secrets if needed
        run: |
          cd book-network-backend
          ./mvnw clean test

  # 3rd job
  build:
    runs-on: ubuntu-latest
    name: Build Backend
    needs: [compile, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build Backend Project
        env:
          DB_URL: ${{ secrets.DB_URL }}
          USER_NAME: ${{ secrets.DB_USERNAME }}
          PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          cd book-network-backend
          ./mvnw clean package

  # 4th job
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build Backend Project
        env:
          DB_URL: ${{ secrets.DB_URL }}
          USER_NAME: ${{ secrets.DB_USERNAME }}
          PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          cd book-network-backend
          ./mvnw clean package

      - name: Extract Project Version
        id: extract_version
        run: |
          cd book-network-backend
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build & Push to Dockerhub
        uses: docker/build-push-action@v5
        with:
          context: book-network-backend
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{secrets.DOCKERHUB_USERNAME}}/bsn:${{steps.extract_version.outputs.VERSION}},${{secrets.DOCKERHUB_USERNAME}}/bsn:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{steps.extract_version.outputs.VERSION}}
            DB_URL=${{secrets.DB_URL}}
            USER_NAME=${{secrets.DB_USERNAME}}
            PASSWORD=${{secrets.DB_PASSWORD}}

  # # 5th job
  # deploy:
  #   name: Deploy Backend
  #   runs-on: ubuntu-latest
  #   needs: [build-image]
  #   steps:
  #     - name: Create Deployment folder on VM
  #       # ssh username@ip_address
  #       run: ssh ${{secrets.VPS_USERNAME}}@${{secrets.VPS_IP}} "mkdir -p ci-cd"

  #     - name: Copy the Docker-Compose file
  #       run: scp docker-compose.yml ${{secrets.VPS_USERNAME}}@${{secrets.VPS_IP}}:ci-cd/docker-compose.yml

  #     - name: Set ENV variables and Deploy
  #       run: |
  #         ssh ${{secrets.VPS_USERNAME}}@${{secrets.VPS_IP}} <<EOF
  #         export EMAIL_HOSTNAME=${{secrets.EMAIL_HOSTNAME}}
  #         export EMAIL_PASSWORD=${{secrets.EMAIL_PASSWORD}}
  #         export EMAIL_USERNAME=${{secrets.EMAIL_USERNAME}}
  #         cd ci-cd
  #         docker-compose -f docker-copose.yml pull -q
  #         docker-compose -f docker-copose.yml up -d
  #         EOF


  #  deploy:
  #    runs-on: ubuntu-latest
  #    needs: build  # Ensure deployment happens after the build job
  #
  #    steps:
  #      - name: Checkout Repository
  #        uses: actions/checkout@v3
  #
  #      - name: Set up SSH for EC2
  #        run: |
  #          mkdir -p ~/.ssh
  #          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
  #          chmod 600 ~/.ssh/id_rsa
  #
  #      - name: Deploy to EC2
  #        run: |
  #          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
  #            cd /path/to/your/project/directory
  #            git pull origin main  # Or any other command to pull the latest code
  #            docker-compose down  # Stop any existing containers
  #            docker-compose up -d  # Start the new containers
  #          EOF

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [ build-image ]
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          eval $(ssh-agent -s)
          ssh-add key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment folder on EC2
        run: |
          ssh -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ci-cd"

      - name: Create deployment folder
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ci-cd"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Copy docker-compose file
        run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:ci-cd/docker-compose.yml

      - name: Login to Docker Hub
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Set ENV variable and deploy
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          eval $(ssh-agent -s)
          ssh-add key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          ssh -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
          export DB_URL="${{ secrets.DB_URL }}"
          export USER_NAME="${{ secrets.DB_USERNAME }}"
          export PASSWORD="${{ secrets.DB_PASSWORD }}"
          cd ci-cd
          sudo docker-compose -f docker-compose.yml pull -q
          sudo docker-compose -f docker-compose.yml up -d
          EOF
