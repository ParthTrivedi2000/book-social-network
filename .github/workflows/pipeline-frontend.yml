name: BSN Frontend Pipeline

# now here we need to define like when we want to build/ trigger this pipeline
on:
  push:
    branches:
      - feature/ci-pipeline
      - feature/cloud-deployment
    paths:
      - book-network-ui/**
      - docker/frontend/**
      - 'docker-compose.yml'
      - .github/workflows/*-frontend.yml


jobs:
  build-image:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
#
#      - name: Set up Docker
#        uses: docker/setup-docker@v2

      # Cache Node modules
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            book-network-ui/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('book-network-ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Need to check later like do I need to cache build folder as well to optimise the ci/cd pipline?
      # Optionally Cache build output (if needed)
#      - name: Cache build directory
#        uses: actions/cache@v3
#        with:
#          path: book-network-ui/build
#          key: ${{ runner.os }}-build-${{ hashFiles('book-network-ui/package.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-

      - name: Extract the Project Version
        id: extract_version
        # Here in your VM, there must be installed jq. (apt-get install jq). it is used to extract anythin ni jsaon format/file
        run: |
          cd book-network-ui
          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build & Push to Dockerhub
        uses: docker/build-push-action@v5
        with:
          context: book-network-ui
          file: docker/frontend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{secrets.DOCKERHUB_USERNAME}}/bsn-ui:latest,${{secrets.DOCKERHUB_USERNAME}}/bsn-ui:${{steps.extract_version.outputs.VERSION}}
          build-args: |
            REACT_APP_API_URL=http://${{ secrets.EC2_HOST }}:8088/api/v1

  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [ build-image ]
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          eval $(ssh-agent -s)
          ssh-add key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment folder on EC2
        run: |
          ssh -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ci-cd"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Copy docker-compose file
        run: |
          ls -la  # List files in the current directory to verify the presence of docker-compose.yml
          scp -oStrictHostKeyChecking=no $GITHUB_WORKSPACE/docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:ci-cd/docker-compose.yml

      - name: Set ENV variable and deploy
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          eval $(ssh-agent -s)
          ssh-add key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          ssh -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
          export DB_URL=${{ secrets.DB_URL }}
          export USER_NAME=${{ secrets.DB_USERNAME }}
          export PASSWORD=${{ secrets.DB_PASSWORD }}
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          # Construct the REACT_URL using the EC2_HOST secret
          export REACT_APP_API_URL=http://${{ secrets.EC2_HOST }}:8088/api/v1
          cd ci-cd
          docker-compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d
          EOF